import java.nio.file.Files
import java.nio.file.Paths

plugins {
	id 'java'
	id "com.palantir.graal" version "0.3.0-2-g6c49b4d"
}

apply plugin: 'com.palantir.graal'

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url = "https://repo.spring.io/milestone"
	}
	maven {
		url = "https://repo.spring.io/snapshot"
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

graal {
	mainClass 'com.mageddo.bookmarks.Application'
	graalVersion("1.0.0-rc13")
	outputName(project.name)
	option("-H:IncludeResources=META-INF/.*.json|META-INF/spring.factories|org/springframework/boot/logging/.*")
	option("-H:IncludeResources=static/.*")
	option("--allow-incomplete-classpath")
	option("--delay-class-initialization-to-runtime=org.springframework.core.io.VfsUtils,org.springframework.format.support.DefaultFormattingConversionService")
	option("-H:ReflectionConfigurationFiles=graal/boot.json,graal/framework.json,graal/log4j.json")
	option("-H:+ReportUnsupportedElementsAtRuntime")
	option("-Dfile.encoding=UTF-8")
	option("--no-server")
}

task copyStatics() {

	def binFilePath = "${project.buildDir}/graal/"
	def distPath = Paths.get("${binFilePath}/dist")

	Files.createDirectories(distPath)
	Files.walk(distPath)
	.sorted(Comparator.reverseOrder())
	.forEach({
		try {
			Files.deleteIfExists(it)
		} catch(IOException e){
			throw new UncheckedIOException(e)
		}
	})

	/**
	 * Copying static files
	 */
	ant.copy(
		todir: binFilePath
	){
		fileset(dir: project.sourceSets.main.output.resourcesDir)
	}

	/**
	 * Create a distribution file
	 */
	ant.zip(destfile: "${distPath}/${project.name}.zip"){
		zipfileset("dir": binFilePath)
	}
}

//nativeImage.finalizedBy copyStatics

configurations.all {
	exclude module: "javax.annotation-api"
	exclude module: "hibernate-validator"
	exclude module: "spring-boot-starter-reactor-netty"
}

dependencies {

	compileOnly('com.mageddo:rsl:1.0.0')
	annotationProcessor('com.mageddo:rsl-compiler:1.0.1')

	testCompileOnly('com.mageddo:rsl:1.0.0')
	testAnnotationProcessor('com.mageddo:rsl-compiler:1.0.1')
	

	implementation("org.springframework.fu:spring-fu-jafu:0.0.6.BUILD-SNAPSHOT")
	implementation("org.springframework.boot:spring-boot-starter-webflux:2.1.3.RELEASE")
	implementation("org.springframework.boot:spring-boot-starter-jetty:2.1.3.RELEASE")
	implementation("org.graalvm.sdk:graal-sdk:1.0.0-rc13")


	compile 'com.sparkjava:spark-core:2.8.0'
	compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.11.RELEASE'
	compile group: 'com.sparkjava', name: 'spark-template-thymeleaf', version: '2.7.1'

	compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.5.RELEASE'
	compile 'com.zaxxer:HikariCP:3.3.1'

	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
	compile group: 'net.java.dev.jna', name: 'jna', version: '5.2.0'
	compile group: 'net.java.dev.jna', name: 'jna-platform', version: '5.2.0'
	compile group: 'org.graalvm.sdk', name: 'graal-sdk', version: '1.0.0-rc13'

	compile group: 'commons-io', name: 'commons-io', version: '2.6'

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.0'

}
